% Generated by roxygen2 (4.0.1): do not edit by hand
\name{update.trainOcc}
\alias{update.trainOcc}
\title{Update or Re-fit a Model}
\usage{
\method{update}{trainOcc}(object, modParam = NULL, modRow = NULL,
  modRank = NULL, by = NULL, newMetric = NULL,
  aggregatePredictions = FALSE, newMetricsOnly = FALSE, ...)
}
\arguments{
\item{object}{a object of class \code{trainOcc}.}

\item{modParam}{a data frame with the desired model parameters, or}

\item{modRow}{the index of the model, i.e. the row in the  \code{object$results} table, or}

\item{modRank}{the model at the modRank-th position after sorting by a performance metric (can be specified via argumetn \code{by}).}

\item{by}{when the modRank is given, the models are ranked by the metric given here.
if \code{NULL} the metric in \code{object$metric} is used.}

\item{newMetric}{a function that can be passed to the \code{summaryFunction} argument of \code{\link{trainControl}}.
This updates the \code{trainOcc$results} data frame with the new metric(s) returned from the function.
(Only be done when hold-out predictions are stored in \code{object}.)}

\item{aggregatePredictions}{The efault is \code{FALSE}, which means that the performance metric is calculated for
each set of hold-out predictions and the metrics are then aggregated. The mean and the standard deviation is returned in the
\code{object$results} table. If \code{TRUE} the hold-out predictions are first aggregated and the \code{newMetric} is calculated once.
Of course, no standard deviation of the performance metric can be calculated.
Metrics calculated this way get the suffix \code{AP} in the \code{object$results} table.}

\item{newMetricsOnly}{logical with default set to \code{FALSE}. Set to \code{TRUE} if the metrics already contained in the results table should be removed.}

\item{...}{other arguments that can be passed to update.train}
}
\value{
an updated trainOcc object.
}
\description{
Over-write the tuning parameter selection process.
You can also calculate new performance metrics given the hold-out predictions
are stored in \code{object}.
}
\details{
update.train
}
\examples{
\dontrun{
data(bananas)

tocc <- trainOcc(x=bananas$tr[, -1], y=bananas$tr[, 1], method="ocsvm")

## update to the highest ranked model according to metric puAuc
tocc <- update(tocc, modRank=1, by="puAuc")
}
}

