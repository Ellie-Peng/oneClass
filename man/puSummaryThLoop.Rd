% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/puSummaryThLoop.R
\name{puSummaryThLoop}
\alias{puSummaryThLoop}
\title{puSummaryThLoop}
\usage{
puSummaryThLoop(data, lev = NULL, model = NULL, thresholds = NULL,
  maximize = c("puF", "puF1"), returnAll = FALSE, calcAUC = FALSE)
}
\arguments{
\item{data}{a data frame or matrix with columns \code{obs}, \code{pred}, and \code{pos}.
The first two are the binary observed, predicted outcomes and the latter one the 
continous outcome for the positive class.}

\item{lev}{a character vector of factors levels for the response (default is \code{NULL}).}

\item{model}{a character string for the model name (as taken form the method argument of train) (default is \code{NULL}).}

\item{thresholds}{thresholds for which to calcualte the performance metrics}

\item{maximize}{Charater (vector). The metrics to be maximized. 
Must correspond to a name of the vector returned by \code{puSummary}.}

\item{returnAll}{return metrics for all thresholds.}
}
\value{
values of performance metrics
}
\description{
An example for a PU summary function which derives the maximum performance metric over a set of thresholds. Here 50 thresholds between the medians of the positive and unlabeled hold out predictions.
}
\examples{
\dontrun{
data(bananas)
tuneGrid <- expand.grid(sigma=c(1:10)*rep(c(.1, 1), each=10), 
                       nu=c(0.01, 0.05, 0.10, 0.15, 0.20, 0.25))
model <- trainOcc(x=bananas$tr[, -1], y=bananas$tr[, 1], 
                 method="ocsvm", tuneGrid=tuneGrid)
model <- update(model, aggregatePredictions=TRUE, 
               metric="puFAP")
model <- update(model, aggregatePredictions=TRUE, 
               puSummaryFunction = puSummaryThLoop, 
               metric="thPuFAP")
pairs(model$results[, c("puF", "puFAP", "thPuFAP")])

mp.puF <- modelPosition(model, modRank=1, by="puF")
mp.puFAP <- modelPosition(model, modRank=1, by="puFAP")
mp.thPuFAP <- modelPosition(model, modRank=1, by="thPuFAP")

featurespace(update(model, modRow=mp.puF$row))
featurespace(update(model, modRow=mp.puFAP$row))
featurespace(update(model, modRow=mp.thPuFAP$row))
pred.puF <- predict(update(model, modRow=mp.puF$row), 
                   bananas$x, returnRaster=FALSE)
pred.puFAP <- predict(update(model, modRow=mp.puFAP$row), 
                     bananas$x, returnRaster=FALSE)
pred.thPuFAP <- predict(update(model, modRow=mp.thPuFAP$row), 
                       bananas$x, returnRaster=FALSE)
hist(update(model, modRow=mp.puF$row), pred.puF)
hist(update(model, modRow=mp.puFAP$row), pred.puFAP)
hist(update(model, modRow=mp.thPuFAP$row), pred.thPuFAP)
abline(v=c(0, model$results[mp.thPuFAP$row, "thAP"] ))
}
}

