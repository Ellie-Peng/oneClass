% Generated by roxygen2 (4.0.1): do not edit by hand
\name{evaluateOneClass}
\alias{evaluateOneClass}
\title{Model evaluation / accuracy assessment for \code{oneClass} objects.}
\usage{
evaluateOneClass(x, y, th = NULL, u = NULL, idx = NULL, positive = NULL,
  allModels = FALSE, modParam = NULL, modRow = NULL, modRank = NULL,
  by = NULL, decreasing = TRUE, ...)
}
\arguments{
\item{x}{an object of class \code{oneClass} or \code{iterative},}

\item{y}{a vector of observed values. Values must be ... .}

\item{th}{...}

\item{u}{the unlabeled data or predictor variables. Required only if
\code{x} is a \code{train} object or if a model other than the final model is to be evaluated.}

\item{idx}{the index of y in x if y is a subset of x, or of x$pred if x is a
oneClass-object.}

\item{positive}{the positive label in y}

\item{allModels}{\code{FALSE}, Set to \code{TRUE} if all models should be evaluated?}

\item{modParam}{data frame with the parameters of the model.}

\item{modRow}{the row or index of the model in the
model-selection table.}

\item{modRank}{the rank of the model after sorting by \code{by}.
this table is located in \code{x$results}/\code{x$results}).}

\item{by}{a character or character vector specifying by which columns to sort.
If \code{NULL} the performance metric is taken from the \code{train} object.}

\item{decreasing}{only when \code{modRank} is used. \code{TRUE} (default) to sort in decreasing order. Can be a vector if \code{by} is a vector.}

\item{...}{arguments passed to \code{\link[dismo]{evaluate}} from the \code{dismo} package.}
}
\value{
an object of class ModelEvaluation
(see \code{\link{ModelEvaluation-class}}))
or ModelSelectionEvaluation. The latter is a list with two elements, the
first containing the model sleetion table and the second a list with the evaluation
results, each of whith a \code{ModelEvaluation} object.
The rows in model selection table correspond to the evaluation list elements.
}
\description{
Calculation of accuracy for specified thresholds.
A slightly modified  version of the \code{evaluate} function from the package \code{dismo}
is called to perform the calculations.
}
\details{
Only the final model is evaluated when \code{allModels} is \code{FALSE}
and non of the arguments
\code{modParam},\code{modRow}, or \code{modRank} given.
}
\examples{
\dontrun{
# get training and test data
data(bananas)
seed <- 123456
tr.x <- bananas$tr[, -1]
tr.y <- bananas$tr[, 1]
set.seed (seed)
te.i <- sample ( ncell (bananas$y), 1000 )
te.x <- extract (bananas$x, te.i)
te.y <- extract (bananas$y, te.i)
# run oneClass
oc <- oneClass(x=tr.x, y=puFactor(tr.y),
               tuneGrid=expand.grid(sigma=c(0.1,1), ### not so large grid
                                    cNeg=2^seq(-5, 10, 3),
                                    cMultiplier=2^seq(4, 15, 2)))
# evaluate the final model
ev <- evaluateOneClass(oc, y=te.y, u=te.x)
# besides the thresholds used, this is identical to:
te.pred <- predict(oc, te.x)
ev <- evaluate(p=te.pred[te.y==1], a=te.pred[te.y!=1])
# evaluate several models
# e.g. evaluate models with a true positive rate (Tpr) higher than 0.8 and a
# positive prediction probability (puPpv) small than 0.4
modRows <- which(oc$results$Tpr>=0.8 & oc$results$puPpv<0.4)
ev <- evaluateOneClass(oc, y=te.y, u=te.x, modRow=modRows)
# plot the pu-performance metric versus the maximum kappa
evList <- print(ev)
plot(evList$puF, evList$mxK.K, xlab="puF", ylab="max. Kappa")
}
}

