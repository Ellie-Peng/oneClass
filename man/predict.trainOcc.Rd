% Generated by roxygen2 (4.0.1): do not edit by hand
\name{predict.trainOcc}
\alias{predict.trainOcc}
\title{Predict method for \code{\link{trainOcc}} objects.}
\usage{
\method{predict}{trainOcc}(object, newdata, type = "prob",
  allowParallel = TRUE, returnRaster = TRUE, mask = NULL, ...)
}
\arguments{
\item{object}{a \code{\link{trainOcc}} object}

\item{newdata}{new data to predict on.}

\item{type}{default is 'prob' which however returns the continuous decision values (see note!)}

\item{allowParallel}{should parallel processing be allowed.}

\item{returnRaster}{default \code{TRUE}}

\item{mask}{if given and if \code{returnRaster=TRUE} only predictions of the valid cells are returned.}

\item{...}{other arguments that can be passed to \code{\link{predict.train}}.}
}
\value{
the predicted data, eventually returned as \code{rasterLayer}.
}
\description{
The prediction works on usual matrices/data frames, the \code{raster*}
and \code{rasterTiled} objects. If a parallel backend for \code{foreach} (e.g. via \code{doParallel})
is used for the prediction of \code{raster*} and \code{rasterTiled} objects. Small data sets are
are processed faster sequentially due to the parallel overhead.
}
\note{
\code{type='probs'} does NOT return probabilities but the continuous
decision values of the classifier, e.g. distances in the case of the one-class
and biased svm) and not probabilities!
}
\examples{
\dontrun{
data(bananas)
### fit a model
fit <- trainOcc (x = bananas$tr[, -1], y = bananas$tr[, 1], method="biasedsvm",
                 tuneGrid=expand.grid(sigma=c(0.1, 1),
                                      cNeg=2^seq(-4, 2, 2),
                                      cMultiplier=2^seq(4, 8, 2) ) )
# predict a raster
pred <- predict(fit, bananas$x)
plot(pred)

# register a parallel backend and predict in parallel with rasterEngine of spatial.tools
require(doParallel) # or use another parallel backend for foreach
cl <- makeCluster(detectCores()-1) # leave one core free if you don't want to go for coffee
registerDoParallel(cl)
pred <- predict(fit, bananas$x)
plot(pred)
stopCluster(cl)
}
}

